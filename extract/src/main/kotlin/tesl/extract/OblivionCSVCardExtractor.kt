package tesl.extract

import kong.unirest.Unirest
import krangl.DataFrame
import krangl.eq
import krangl.readDelim
import org.jsoup.Jsoup
import tesl.model.TESLCard

class OblivionCSVCardExtractor {

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            val csvData = this::class.java.getResource("/allCards.csv").openStream()
            val df = DataFrame.readDelim(csvData)

            val crisisDF = df.filter{ it["collection"] eq "Crisis" }

            // This map had to be manually generated by scarping the URLs from the 2 pages
            /*
             curl 'https://www.legends-decks.com/cards/all/mana-up/1/list?f-search=&f-type=all&f-quality=all&f-race=all&f-attack-min=&f-attack-max=&f-health-min=&f-health-max=&f-magicka-min=&f-magicka-max=&f-collectible=&f-set=oblivion&filters=Filter&' > crisis-1.html
             curl 'https://www.legends-decks.com/cards/all/mana-up/2/list?f-search=&f-type=all&f-quality=all&f-race=all&f-attack-min=&f-attack-max=&f-health-min=&f-health-max=&f-magicka-min=&f-magicka-max=&f-collectible=&f-set=oblivion&filters=Filter&' > crisis-2.html
             grep -h tooltipcard *.html | cut -d\" -f4 | awk -F/ '{printf("\"%s\" to %d,\n", $6, $5)}' | sort
             */
            val legendsDecksMap = mapOf(
                "agentofmehrunesdagon" to 1265,
                "arenthiaguerrilla" to 1246,
                "attuneddremora" to 1249,
                "bedlam" to 1288,
                "bitterfishwitch" to 1258,
                "blacksoulgem" to 1277,
                "blackwoodalchemist" to 1289,
                "bladesdefender" to 1290,
                "bladesflanker" to 1291,
                "bladesguardian" to 1256,
                "bladesstalwart" to 1292,
                "blastfromoblivion" to 1237,
                "blindmothpriest" to 1279,
                "bloodcrazeddaedroth" to 1225,
                "bloodyhandchef" to 1244,
                "brotherhoodsupect" to 1282,
                "brotherhoodvampire" to 1260,
                "cityguard" to 1293,
                "clannfearrunt" to 1294,
                "daedricincursion" to 1295,
                "deaddrop" to 1245,
                "defenseofbruma" to 1240,
                "determinedsupplier" to 1250,
                "diverockfall" to 1296,
                "doomedadventurer" to 1297,
                "dremoraadept" to 1238,
                "dremoraarcher" to 1268,
                "dremorachanneler" to 1253,
                "dusteaterskirmisher" to 1259,
                "elixirofpotency" to 1298,
                "emperorsattendant" to 1243,
                "fadedwraith" to 1285,
                "fingersofthemountain" to 1273,
                "flamingbreath" to 1257,
                "forcesofdestruction" to 1227,
                "freshstart" to 1275,
                "giantslaughterfish" to 1299,
                "greatsigilstone" to 1270,
                "hannibaltravel" to 1284,
                "invasionmarauder" to 1274,
                "invasionparty" to 1241,
                "invasionscout" to 1254,
                "invasionvanguard" to 1283,
                "jauffre" to 1255,
                "keeperofthegates" to 1234,
                "kynreevechampion" to 1262,
                "lordofthearena" to 1247,
                "mankarcamoran" to 1230,
                "marauderchieftain" to 1300,
                "martinseptim" to 1278,
                "mehrunesdagonsflayer" to 1267,
                "mehrunesdagonsseducer" to 1301,
                "miscarcandlich" to 1248,
                "modrynoreyn" to 1271,
                "mountainlion" to 1302,
                "mute" to 1261,
                "mythicdawnacolyte" to 1303,
                "mythicdawninformer" to 1269,
                "mythicdawnzealot" to 1304,
                "oblivioninvasion" to 1286,
                "occultritemaster" to 1276,
                "outlandpatrol" to 1305,
                "paintedworld" to 1231,
                "siegecrawler" to 1226,
                "sigilkeeper" to 1252,
                "sunkenone" to 1306,
                "thecrisisbegins" to 1239,
                "thegrayfox" to 1266,
                "theultimateheist" to 1263,
                "threefeatherwarchief" to 1242,
                "trustysword" to 1307,
                "umariltheunfeathered" to 1308,
                "unexpectedarrival" to 1281,
                "unfinishedbusiness" to 1309,
                "unicorn" to 1236,
                "valkynazmage" to 1264,
                "whodunit" to 1280,
                "widowdaedra" to 1235,
                "wildboar" to 1251,
                "willothewisp" to 1310,
                "worldlywanderer" to 1311,
                "xivilaiwarlord" to 1229
            )

            val defaultHeaders = mapOf(
                "origin" to "https://www.legends-decks.com",
                "accept-encoding" to "gzip, deflate, br",
                "accept-language" to "en-GB,en;q=0.9,en-US;q=0.8,fr;q=0.7",
                "x-requested-with" to "XMLHttpRequest",
                "pragma" to "no-cache",
                "content-type" to "application/x-www-form-urlencoded; charset=UTF-8",
                "accept" to "application/json, text/javascript, */*; q=0.01",
                "cache-control" to "no-cache",
                "authority" to "www.legends-decks.com",
                "referer" to "https://www.legends-decks.com/deck-builder"
            )

            crisisDF.rows.forEach {
                val shortName = (it["name"] as String)
                    .replace("-", "")
                    .replace("'", "")
                    .replace(" ", "")
                    .toLowerCase()

                val legendsName = when(shortName) {
                    "brotherhoodsuspect" -> "brotherhoodsupect"
                    "hannibaltraven" -> "hannibaltravel"
                    else -> shortName
                }


                println ("${it["name"]} -> ${legendsDecksMap[legendsName]}")
                val x = Unirest
                    .get("https://www.legends-decks.com/card/{code}/{name}")
                    .routeParam("code", legendsDecksMap[legendsName].toString())
                    .routeParam("name", legendsName)
                    .headers(defaultHeaders)
                    .asString()
                    .body

                val doc = Jsoup.parse(x)

                val img = doc.selectFirst("img[src~=img_cards]").attr("src")

                val cardData = doc.select(".well_full.margintop")
                    .select("table")
                    .select("tbody")
                    .first()
                    .getElementsByTag("tr")
                    .map { elem ->
                        val tds = elem.getElementsByTag("td")
                        val key = tds[0].text()
                        val value = when(key) {
                            "Attributes" -> tds[1].getElementsByTag("img").joinToString(",") { e -> e.attr("alt") }
                            "Keywords" -> tds[1].text().toLowerCase()
                            else -> tds[1].text()
                        }
                        key to value
                    }
                    .toMap()

                val card = createCard(cardData, it["export_code"] as String, img)
                card.write("/tmp/cards")

            }

        }

        private fun createCard(data: Map<String, String>, exportCode: String, img: String): TESLCard {
            val name = data.getOrDefault("Name", "UNKNOWN")
            val rarity = data.getOrDefault("Rarity", "UNKNOWN")
            val type = data.getOrDefault("Type", "UNKNOWN")
            val attributes = data.getOrDefault("Attributes", "UNKNOWN").split(",")
            val race = data.getOrDefault("Race", "UNKNOWN")
            val magickaCost = data.getOrDefault("Magicka Cost", "UNKNOWN").toIntOrNull() ?: 0
            val attack = data.getOrDefault("Attack", "UNKNOWN").toIntOrNull() ?: 0
            val health = data.getOrDefault("Health", "UNKNOWN").toIntOrNull() ?: 0
            val set = mapOf("id" to "joo", "name" to "Jaws of Oblivion")
            val soulSummon = data.getOrDefault("Soul Summon", "UNKNOWN").toIntOrNull() ?: 0
            val soulTrap = data.getOrDefault("Soul Trap", "UNKNOWN").toIntOrNull() ?: 0
            val text = data.getOrDefault("Text", "UNKNOWN")
            val keywords = data.getOrDefault("Keywords", "UNKNOWN").split(",")

            return TESLCard(
                name = name,
                rarity = rarity.split(" ").first(),
                type = type,
                subtypes = listOf(race).filter { it.isNotEmpty() },
                cost = magickaCost,
                power = attack,
                health = health,
                set = set,
                collectible = true,
                soulSummon = soulSummon,
                soulTrap = soulTrap,
                text = text,
                attributes = attributes.map { it.capitalize() }.filter { it.isNotEmpty() },
                keywords = keywords.map { it.capitalize() }.filter { it.isNotEmpty() },
                unique = rarity.contains("Unique"),
                imageUrl = img,
                code = exportCode
            )
        }
    }

}

